---
- name: Kerberos server installation and configuration
  block:
  - name: load passwords from LDAP role vault file
    include_vars: roles/ldapserver/vars/vaultfile.yml
  - name: load variables from LDAP role main file
    include_vars: roles/ldapserver/vars/main.yml
  - name: load passwords from vault file
    include_vars: vaultfile.yml
  - name: Install Kerberos server packages
    yum:
      name: "krb5-server,krb5-server-ldap"
      state: present
  - name: find kerberos schema file
    command:
      argv:
        - find
        - /usr/share/doc
        - -mindepth
        - 1
        - -maxdepth
        - 1
        - -type
        - d
        - -name
        - "krb5-server-ldap-*"
    register: findout
    changed_when: false
    failed_when: findout.rc != 0 or "/usr/share/doc/krb5-server-ldap-" not in findout.stdout
  - name: load needed schema
    block:
    - name: try loading provided LDIF file
      command:
        chdir: "{{ findout.stdout_lines[0] }}"
        argv:
          - /usr/bin/ldapadd
          - -H
          - ldapi:///
          - -Y
          - EXTERNAL
          - -f
          - kerberos.ldif
      register: krb5ldapout
      changed_when: krb5ldapout.rc != 80
      failed_when: krb5ldapout.rc != 0 and krb5ldapout.rc != 80
    rescue:
    - name: Ensure that 'ldapadd' error has been caused by an malformed schema LDIF file
      assert:
        that: krb5ldapout.rc == 21
    - name: regenerate kerberos schema file
      block:
      - name: create temporary file
        tempfile:
          state: file
          suffix: _slapd.conf
        register: slapdtempfile
        changed_when: false
      - name: create temporary directory
        tempfile:
          state: directory
          suffix: _slapd.d
        register: slapdtempdir
        changed_when: false
      - name: create temporary slapd.conf
        copy:
          content: "include {{ findout.stdout_lines[0] }}/kerberos.schema"
          dest: "{{ slapdtempfile.path }}"
        changed_when: false
      - name: write temporary kerberos schema LDIF file
        command:
          argv:
            - slaptest
            - -f
            - "{{ slapdtempfile.path }}"
            - -F
            - "{{ slapdtempdir.path }}"
        register: slaptestout
        changed_when: false
        failed_when: slaptestout.rc != 0
      - name: modify temporary kerberos schema LDIF file
        replace:
          path: "{{ slapdtempdir.path }}/cn=config/cn=schema/cn={0}kerberos.ldif"
          regexp: "{{ item.pattern }}"
          replace: "{{ item.replacement }}"
        with_items:
          - { pattern: '(?i)^dn:\s+cn=\{0\}kerberos\s*$', replacement: 'dn: cn=kerberos,cn=schema,cn=config' }
          - { pattern: '(?i)^cn:\s+\{0\}kerberos\s*$', replacement: 'cn: kerberos' }
        changed_when: false
      - name: remove unwanted lines from temporary kerberos schema file
        # https://community.cloudera.com/t5/Community-Articles/Configuring-Kerberos-with-OpenLDAP-back-end/ta-p/248584
        lineinfile:
          path: "{{ slapdtempdir.path }}/cn=config/cn=schema/cn={0}kerberos.ldif"
          regexp: '(?i)^{{ item }}:'
          state: absent
        with_items:
          - structuralObjectClass
          - entryUUID
          - creatorsName
          - createTimeStamp
          - entryCSN
          - modifiersName
          - modifyTimestamp
        changed_when: false
      - name: try loading temporary kerberos schema LDIF file
        command:
          chdir: "{{ slapdtempdir.path }}/cn=config/cn=schema"
          argv:
            - /usr/bin/ldapadd
            - -H
            - ldapi:///
            - -Y
            - EXTERNAL
            - -f
            - "cn={0}kerberos.ldif"
        register: krb5ldapout2
        changed_when: krb5ldapout2.rc != 80
        failed_when: krb5ldapout2.rc != 0 and krb5ldapout2.rc != 80
  - name: create LDAP users for krb5kdc and kadmind
    ldap_entry:
      dn: "cn={{ item.user }},{{ example_ldap_name }}"
      objectClass: person
      attributes:
        cn: "{{ item.user }}"
        sn: "{{ item.user }}"
        userPassword: "{{ item.password }}"
      state: present
    with_items:
      - { user: "krb5kdc", password: "{{ krb5kdcPassword }}" }
      - { user: "kadmind", password: "{{ kadmindPassword }}" }
  - name: modify default OpenLDAP database (permissions and indexes)
    ldap_attr:
      dn: olcDatabase={2}hdb,cn=config
      name: "{{ item.key }}"
      values: "{{ item.value }}"
      state: present
    with_dict:
      olcAccess:
        - >-
          {2}to dn.subtree="cn={{ example_dns_name | upper }},cn=krbcontainer,{{ example_ldap_name }}"
          by anonymous auth
          by dn.exact="cn=Manager,{{ example_ldap_name }}" write
          by dn.exact="cn=krb5kdc,{{ example_ldap_name }}" write
          by dn.exact="cn=kadmind,{{ example_ldap_name }}" write
          by * none
        - >-
          {3}to dn.subtree="ou=users,{{ example_ldap_name }}"
          by anonymous auth
          by dn.exact="cn=Manager,{{ example_ldap_name }}" write
          by dn.exact="cn=krb5kdc,{{ example_ldap_name }}" write
          by dn.exact="cn=kadmind,{{ example_ldap_name }}" write
          by * read
      olcDbIndex: "krbPrincipalName eq,pres"
  - name: deploy kdc.conf file
    template:
      backup: yes
      dest: "{{ krb5kdc_rootdir }}/kdc.conf"
      force: yes
      group: root
      mode: "0600"
      owner: root
      src: kdc.conf.j2
    notify:
      - restart KDC service
      - restart KADMIN service
  - name: create password file that will store LDAP credentials for kerberos
    command:
      argv:
        - /usr/sbin/kdb5_ldap_util
        - stashsrvpw
        - -f
        - "{{ krb5kdc_rootdir }}/ldap_srvpw"
        - "cn={{ item.user }},{{ example_ldap_name }}"
      stdin: "{{ item.password }}\n{{ item.password }}\n"
    with_items:
      - { user: "krb5kdc", password: "{{ krb5kdcPassword }}" }
      - { user: "kadmind", password: "{{ kadmindPassword }}" }
    register: kdb5_ldap_output
    changed_when: false
    failed_when: kdb5_ldap_output.rc != 0
  - name: Create the realm using kdb5_ldap_util if it does not exist
    block:
      - name: Check whether Kerberos realm exists within LDAP tree
        command:
          argv:
            - /usr/sbin/kdb5_ldap_util
            - view
            - -r
            - "{{ example_dns_name | upper }}"
        register: kdb5_ldap_output2
        changed_when: false
        failed_when: kdb5_ldap_output2.rc != 0
    rescue:
      - name: Ensure that 'kdb5_ldap_util' error has been caused by object absence
        assert:
          that: kdb5_ldap_output2.stderr | regex_search('(?i)^(.*[:\s])?no\s+such\s+object\s+')
      - name: Create Kerberos realm within LDAP tree
        command:
          argv:
            - /usr/sbin/kdb5_ldap_util
            - create
            - -subtrees
            - "ou=users,{{ example_ldap_name }}"
            - -sscope
            - SUB
            - -r
            - "{{ example_dns_name | upper }}"
            - -D
            - "cn=Manager,{{ example_ldap_name }}"
            - -s
          stdin: "{{ LDAPManagerPassword }}\n{{ krb5kdcMasterKey }}\n{{ krb5kdcMasterKey }}\n"
        register: kdb5_ldap_output3
        changed_when: true
        failed_when: kdb5_ldap_output3.rc != 0
        notify:
          - restart KDC service
          - restart KADMIN service
# I am in a need of a better strategy here...
  - name: Add kerberos attributes to existing LDAP users
    command:
      argv:
        - /usr/sbin/kadmin.local
        - addprinc
        - -x
        - "dn=uid={{ item }},ou=users,{{ example_ldap_name }}"
        - "{{ item }}@{{ example_dns_name | upper }}"
      stdin: "{{ LDAPUserPassword }}\n{{ LDAPUserPassword }}\n"
    register: kadminlocal_output
    changed_when: kadminlocal_output.rc == 0
    failed_when: kadminlocal_output.rc != 0 and kadminlocal_output.stderr is not match('(?i)principal\s+(|.*\s+)already\s+exists\s+')
    with_items: "{{ NATOalphabet }}"
  tags: krbsetup

