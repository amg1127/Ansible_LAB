---
- name: Kerberos server installation and configuration
  block:
  - name: Load passwords from LDAP role vault file
    include_vars: roles/ldapserver/vars/vaultfile.yml
  - name: Load variables from LDAP role main file
    include_vars: roles/ldapserver/vars/main.yml
  - name: Load passwords from vault file
    include_vars: vaultfile.yml
  - name: Install Kerberos server packages
    yum:
      name: "krb5-server,krb5-server-ldap"
      state: present
  - name: Install Cyrus SASL packages
    yum:
      name: "cyrus-sasl,cyrus-sasl-gssapi,cyrus-sasl-plain"
      state: present
# https://security.stackexchange.com/a/69031
  - name: Enable Kerberos5 authentication mechanism in saslauthd
    ini_file:
      dest: /etc/sysconfig/saslauthd
      section: null
      option: MECH
      value: kerberos5
      no_extra_spaces: yes
    notify: Restart saslauthd service
  - name: Ensure saslauthd service is running
    service:
      name: "saslauthd.service"
      enabled: yes
      state: started
# http://web.mit.edu/kerberos/krb5-latest/doc/admin/conf_ldap.html
  - name: Find kerberos schema file
    command:
      argv:
        - find
        - /usr/share/doc
        - -mindepth
        - 1
        - -maxdepth
        - 1
        - -type
        - d
        - -name
        - "krb5-server-ldap-*"
    register: findout
    changed_when: false
    failed_when: findout.rc != 0 or "/usr/share/doc/krb5-server-ldap-" not in findout.stdout
  - name: Load needed schema
    block:
    - name: Try loading provided LDIF file
      command:
        chdir: "{{ findout.stdout_lines[0] }}"
        argv:
          - /usr/bin/ldapadd
          - -H
          - ldapi:///
          - -Y
          - EXTERNAL
          - -f
          - kerberos.ldif
      register: krb5ldapout
      changed_when: krb5ldapout.rc != 80
      failed_when: krb5ldapout.rc != 0 and krb5ldapout.rc != 80
    rescue:
    - name: Ensure that 'ldapadd' error has been caused by an malformed schema LDIF file
      assert:
        that: krb5ldapout.rc == 21
    - name: Regenerate kerberos schema file
      block:
      - name: Create temporary file
        tempfile:
          state: file
          suffix: _slapd.conf
        register: slapdtempfile
        changed_when: false
      - name: Create temporary directory
        tempfile:
          state: directory
          suffix: _slapd.d
        register: slapdtempdir
        changed_when: false
      - name: Create temporary slapd.conf
        copy:
          content: "include {{ findout.stdout_lines[0] }}/kerberos.schema"
          dest: "{{ slapdtempfile.path }}"
          checksum: "{{ ('include ' ~ findout.stdout_lines[0] ~ '/kerberos.schema') | hash('sha1') }}"
        changed_when: false
      - name: Write temporary kerberos schema LDIF file
        command:
          argv:
            - slaptest
            - -f
            - "{{ slapdtempfile.path }}"
            - -F
            - "{{ slapdtempdir.path }}"
        register: slaptestout
        changed_when: false
        failed_when: slaptestout.rc != 0
      - name: Modify temporary kerberos schema LDIF file
        replace:
          path: "{{ slapdtempdir.path }}/cn=config/cn=schema/cn={0}kerberos.ldif"
          regexp: "{{ item.pattern }}"
          replace: "{{ item.replacement }}"
        with_items:
          - { pattern: '(?i)^dn:\s+cn=\{0\}kerberos\s*$', replacement: 'dn: cn=kerberos,cn=schema,cn=config' }
          - { pattern: '(?i)^cn:\s+\{0\}kerberos\s*$', replacement: 'cn: kerberos' }
        changed_when: false
      - name: Remove unwanted lines from temporary kerberos schema file
        # https://community.cloudera.com/t5/Community-Articles/Configuring-Kerberos-with-OpenLDAP-back-end/ta-p/248584
        lineinfile:
          path: "{{ slapdtempdir.path }}/cn=config/cn=schema/cn={0}kerberos.ldif"
          regexp: '(?i)^{{ item }}:'
          state: absent
        with_items:
          - structuralObjectClass
          - entryUUID
          - creatorsName
          - createTimeStamp
          - entryCSN
          - modifiersName
          - modifyTimestamp
        changed_when: false
      - name: Try loading temporary kerberos schema LDIF file
        command:
          chdir: "{{ slapdtempdir.path }}/cn=config/cn=schema"
          argv:
            - /usr/bin/ldapadd
            - -H
            - ldapi:///
            - -Y
            - EXTERNAL
            - -f
            - "cn={0}kerberos.ldif"
        register: krb5ldapout2
        changed_when: krb5ldapout2.rc != 80
        failed_when: krb5ldapout2.rc != 0 and krb5ldapout2.rc != 80
  - name: Create LDAP users for krb5kdc and kadmind
    ldap_entry:
      dn: "cn={{ item.user }},{{ example_ldap_name }}"
      objectClass: person
      attributes:
        cn: "{{ item.user }}"
        sn: "{{ item.user }}"
        userPassword: "{{ item.password }}"
      state: present
    with_items:
      - { user: "{{ krb5kdcLDAPUserName }}", password: "{{ krb5kdcLDAPPassword }}" }
      - { user: "{{ kadmindLDAPUserName }}", password: "{{ kadmindLDAPPassword }}" }
    no_log: yes
    notify:
    - Restart KDC service
    - Restart KADMIN service
  - name: Modify default OpenLDAP database (permissions and indexes)
    ldap_attr:
      dn: olcDatabase={2}hdb,cn=config
      name: "{{ item.key }}"
      values: "{{ item.value }}"
      state: present
    with_dict:
      olcAccess:
        - >-
          {0}to attrs=userPassword val.regex="^\{SASL\}"
          by self read
          by anonymous auth
          by dn.exact="cn={{ LDAPAdminUserName }},{{ example_ldap_name }}" write
          by * none
        - >-
          {3}to attrs=krbPrincipalKey
          by self write
          by anonymous auth
          by dn.exact="cn={{ LDAPAdminUserName }},{{ example_ldap_name }}" write
          by dn.exact="cn={{ krb5kdcLDAPUserName }},{{ example_ldap_name }}" write
          by dn.exact="cn={{ kadmindLDAPUserName }},{{ example_ldap_name }}" write
          by * none
        - >-
          {4}to dn.subtree="cn={{ example_dns_name | upper }},cn=krbcontainer,{{ example_ldap_name }}"
          by anonymous auth
          by dn.exact="cn={{ LDAPAdminUserName }},{{ example_ldap_name }}" write
          by dn.exact="cn={{ krb5kdcLDAPUserName }},{{ example_ldap_name }}" write
          by dn.exact="cn={{ kadmindLDAPUserName }},{{ example_ldap_name }}" write
          by * none
        - >-
          {5}to dn.subtree="{{ LDAPUsersContainer }},{{ example_ldap_name }}"
          by anonymous auth
          by dn.exact="cn={{ LDAPAdminUserName }},{{ example_ldap_name }}" write
          by dn.exact="cn={{ krb5kdcLDAPUserName }},{{ example_ldap_name }}" write
          by dn.exact="cn={{ kadmindLDAPUserName }},{{ example_ldap_name }}" write
          by * read
      olcDbIndex: "krbPrincipalName eq,pres"
  - name: Deploy kdc.conf file
    template:
      backup: yes
      dest: "{{ krb5kdc_rootdir }}/kdc.conf"
      force: yes
      group: root
      mode: "0600"
      owner: root
      src: kdc.conf.j2
    notify:
    - Restart KDC service
    - Restart KADMIN service
  - name: Create password file that will store LDAP credentials for kerberos
    command:
      argv:
        - /usr/sbin/kdb5_ldap_util
        - stashsrvpw
        - -f
        - "{{ krb5kdc_rootdir }}/ldap_srvpw"
        - "cn={{ item.user }},{{ example_ldap_name }}"
      stdin: "{{ item.password }}\n{{ item.password }}\n"
    with_items:
      - { user: "{{ krb5kdcLDAPUserName }}", password: "{{ krb5kdcLDAPPassword }}" }
      - { user: "{{ kadmindLDAPUserName }}", password: "{{ kadmindLDAPPassword }}" }
    register: kdb5_ldap_output
    changed_when: false
    failed_when: kdb5_ldap_output.rc != 0
    no_log: yes
  - name: Create the realm using kdb5_ldap_util if it does not exist
    block:
      - name: Check whether Kerberos realm exists within LDAP tree
        command:
          argv:
            - /usr/sbin/kdb5_ldap_util
            - view
            - -r
            - "{{ example_dns_name | upper }}"
        register: kdb5_ldap_output2
        changed_when: false
        failed_when: kdb5_ldap_output2.rc != 0
    rescue:
      - name: Ensure that 'kdb5_ldap_util' error has been caused by object absence
        assert:
          that: kdb5_ldap_output2.stderr | regex_search('(?i)^(.*[:\s])?no\s+such\s+object\s+')
      - name: Create Kerberos realm within LDAP tree
        command:
          argv:
            - /usr/sbin/kdb5_ldap_util
            - create
            - -subtrees
            - "{{ LDAPUsersContainer }},{{ example_ldap_name }}"
            - -sscope
            - SUB
            - -r
            - "{{ example_dns_name | upper }}"
            - -D
            - "cn={{ LDAPAdminUserName }},{{ example_ldap_name }}"
            - -s
          stdin: "{{ LDAPAdminPassword }}\n{{ krb5kdcMasterKey }}\n{{ krb5kdcMasterKey }}\n"
        register: kdb5_ldap_output3
        changed_when: true
        failed_when: kdb5_ldap_output3.rc != 0
        no_log: yes
        notify:
        - Restart KDC service
        - Restart KADMIN service
      - name: Set Kerberos administrator password
        command:
          argv:
            - /usr/sbin/kadmin.local
            - cpw
            - "kadmin/admin@{{ example_dns_name | upper }}"
          stdin: "{{ krb5adminPassword }}\n{{ krb5adminPassword }}\n"
        register: kadminpwd_output
        changed_when: true
        failed_when: kadminpwd_output.rc != 0
        no_log: yes
  - name: Open Kerberos ports in firewalld
    firewalld:
      permanent: yes
      immediate: yes
      service: "{{ item }}"
      zone: public
      state: enabled
    with_items:
      - kerberos
      - kpasswd
      - kadmin
  - name: Ensure Kerberos service is running
    service:
      name: "{{ item }}.service"
      enabled: yes
      state: started
    with_items:
      - krb5kdc
      - kadmin
  - name: Create systemd extension directories
    file:
      path: "/etc/systemd/system/{{ item }}.service.d"
      state: directory
      owner: root
      group: root
      mode: "0755"
    with_items:
      - krb5kdc
      - kadmin
  - name: Ensure that Kerberos services start after LDAP service
    copy:
      content: |
        [Unit]
        Requires=slapd.service
        After=slapd.service
      dest: "/etc/systemd/system/{{ item }}.service.d/{{ item }}-after-slapd.conf"
      mode: "0644"
      owner: root
      group: root
    with_items:
      - krb5kdc
      - kadmin
    notify: Reload systemd configuration
  - name: Add kerberos attributes to existing LDAP users
    include_tasks: addkrbuser.yml
    with_items: "{{ NATOalphabet }}"
# https://stackoverflow.com/a/45506096
  - name: Create kerberos principals for hosts found in inventory
    include_tasks: addkrbservice.yml
    with_items: "{{ hostlist }}"
    vars:
      hostlist: >
        [ {% for i in groups['all'] %}
          {
            'host': '{{ i }}',
            'service': 'host',
            'keytabfile': '/etc/krb5.keytab'
          }
          {% if not loop.last %},{% endif %}
          {% endfor %}
        ]
# http://www.openldap.org/doc/admin24/guide.html#Pass-Through%20authentication
  - name: Create kerberos principal for OpenLDAP service
    include_tasks: addkrbservice.yml
    with_items:
      - { host: "{{ inventory_hostname }}", service: 'ldap', keytabfile: "{{ krb5slapdkeytabfile }}", keytabowner: 'ldap', keytabgroup: 'ldap' }
# https://github.com/ansible/ansible/issues/19765
#    notify:
#    - Restart OpenLDAP service
  - name: Deploy /etc/sasl2/slapd.conf file in order to have OpenLDAP performing SASL authentication using GSSAPI (Kerberos 5)
    template:
      src: sasl_slapd.conf.j2
      dest: "{{ SASLConfigDir }}/slapd.conf"
    notify:
    - Restart OpenLDAP service
  - name: Configure identity mapping for EXTERNAL SASL mechanism
    ldap_attr:
      dn: "cn=config"
      name: olcAuthzRegexp
      values: >-
        {1}uid=([^,@]*)(@{{ example_dns_name }})?(,cn={{ example_dns_name }})?,cn=[^,]+,cn=auth
        uid=$1,{{ LDAPUsersContainer }},{{ example_ldap_name }}
      state: present
  - name: Configure LDAP users to have passwords authenticated using SASL and Kerberos
    ldap_attr:
      dn: "uid={{ item }},{{ LDAPUsersContainer }},{{ example_ldap_name }}"
      name: userPassword
      values: "{SASL}{{ item }}@{{ example_dns_name | upper }}"
      state: present
    with_items:
      - "{{ NATOalphabet }}"
  tags: krbsetup

